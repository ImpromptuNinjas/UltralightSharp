name: Unity
on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ master ]
jobs:
  unity-2018-4-lts-tests:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip unity]')"
    env:
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
    steps:
      - uses: actions/checkout@v2
      - run: git remote add gitlab https://gitlab.com/tyler-in/UltralightSharp.git
      - run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      - uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1
      - run: git lfs pull || git lfs pull gitlab
      - uses: satackey/action-docker-layer-caching@v0.0.4
      - name: "Unity: Restore NuGet Packages"
        uses: ImpromptuNinjas/unity-runner@master
        #timeout-minutes: 6
        with:
          projectPath: UltralightSharp.UnityTests
          unityVersion: 2018.4.25f1
          args: -quit -nographics -noUpm -executeMethod ExecutableServices.RestoreNuGetPackages
      - name: "Unity: Probe Ultralight Library"
        uses: ImpromptuNinjas/unity-runner@master
        #timeout-minutes: 6
        with:
          projectPath: UltralightSharp.UnityTests
          unityVersion: 2018.4.25f1
          args: -quit -noUpm -executeMethod ExecutableServices.UltralightLibraryProbe
      - name: "Unity: Run Tests"
        uses: ImpromptuNinjas/unity-runner@master
        #timeout-minutes: 6
        with:
          projectPath: UltralightSharp.UnityTests
          unityVersion: 2018.4.25f1
          args: -noUpm -runTests -testPlatform playmode
  request-unity-2018-4-lts-alf:
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, '[unity alf]')"
    steps:
      - name: Request ALF
        id: getManualLicenseFile
        uses: webbertakken/unity-request-manual-activation-file@v1.1
        with:
          unityVersion: 2018.4.25f1
      - name: Upload ALF as artifact
        uses: actions/upload-artifact@v2
        with:
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}